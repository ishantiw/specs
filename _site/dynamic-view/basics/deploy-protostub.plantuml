
@startuml "deploy-protostub.png"

autonumber

!define SHOW_RuntimeA


!define SHOW_CoreRuntimeA
!define SHOW_MsgBUSAtRuntimeA
!define SHOW_RegistryAtRuntimeA
!define SHOW_CoreAgentAtRuntimeA

!define SHOW_SP1SandboxAtRuntimeA
!define SHOW_Protostub1AtRuntimeA
!define SHOW_ServiceProvider1SandboxManagerAtRuntimeA

!define SHOW_SP1

!include ../runtime_objects.plantuml

-> RunUA@A : loadStub( sp-domain,\n p2pConfig )

RunUA@A -> RunUA@A : check p2pConfig

alt is not a p2pStub
	RunUA@A -> RunReg@A : discoverStub( sp-domain )
else p2pConfig.isHandlerStub = false

	RunUA@A -> RunUA@A : extract runtimeURL \nfrom p2pConfig.p2pHandler
	RunUA@A -> RunReg@A : discoverP2PStub( runtimeURL )
else p2pConfig.isHandlerStub = true
	RunUA@A -> RunReg@A : discoverP2PStub( )
end

alt Stub Not Available in Registry

RunUA@A <-- RunReg@A : returns null

== get protocol stub descriptor ==


	RunUA@A -> SP1 : get <sp-domain>/.well-known/protostub/default/

		note over BUS@A
			as defined in the data model the
			Protocol Stub Descriptor is located
			 in a well known URI.
		end note

	RunUA@A <-- SP1 : returned protostub descriptor

	== get protocol stub source code ==

	RunUA@A -> SP1 : get protocolStubSourceCode

	RunUA@A <-- SP1 : return protostub.js

  == get Sandbox for the Stub ==

	RunUA@A -> RunReg@A : getSandboxURL( domain )


	alt not sandbox registered for this domain

		RunUA@A <-- RunReg@A : return NOt Found

		create Sand1@A
		RunUA@A -> Sand1@A : new( capabilities )

		RunUA@A <-- Sand1@A : return sandboxInstance

	else
		RunUA@A <-- RunReg@A : return sandbox

	end


	== get protocol stub URL ==

	group Protocol Stub instance is registered
		RunUA@A -> RunReg@A : registerStub(stubId, sandbox, p2pConfig)

		RunReg@A -> RunReg@A : generateStubURL()

		note right
			protostub can be generated locally
			by the Runtime Registry ensuring
			the address is unique in the Runtime namespace
			since it only has to be reached by Runtime components
		end note

		alt stubId = runtime URL and p2pConfig.isHandlerStub = false ie it is P2P Requester Stub
			RunReg@A -> RunReg@A : register P2P Stub(stubId)

			RunReg@A -> SP1 : Subscribe P2P Stub URL
			note left
				to setup routing path
				to P2P Requester Stub
			end note
			RunReg@A <-- SP1 : return ok
		else stubId = runtime URL and p2pConfig.isHandlerStub = true ie it is P2P Handler Stub
			RunReg@A -> RunReg@A : register P2P Handler Stub
		else Stub is for a Message Node
			RunReg@A -> RunReg@A : register MN Stub(stubId)
		end

		RunReg@A -> BUS@A : addListener(\n registryListener,\n RuntimeProtoStubURL\status)

		RunUA@A <-- RunReg@A : return RuntimeProtoStubURL
	end

== deploy Protocol Stub in the sandbox ==


	RunUA@A -> Sand1@A : deployComponent( protostub.js, RuntimeProtoStubURL,configuration )

	create Proto1@A
	Sand1@A -> Proto1@A : new

	RunUA@A <-- Sand1@A : return componet is deployed


== configure core msg bus to route messages to new protocol stub ==


	BUS@A <- RunUA@A : addListener( sandboxInstance.postMessage, RuntimeProtoStubURL)

== Protocol Stub connects to domain ==

	group Protocol Stub connection to domain: see Domain Registration in the Identity Management diagrams

	...

	end group

	Proto1@A -> BUS@A : postMessage( \nprotostubStatusUpdate message )

	note left
		eg protostub is connected or disconnected from the domain
	end note

	BUS@A -> RunReg@A : onEvent( \nprotostubStatusUpdate message )

	alt status = live
		RunReg@A -> RunUA@A : Protostub status changed to live
		<- RunUA@A : successful

	end group

end

@enduml
