
@startuml "deploy-iwstub.png"

autonumber

!define SHOW_RuntimeA


!define SHOW_CoreRuntimeA
!define SHOW_MsgBUSAtRuntimeA
!define SHOW_RegistryAtRuntimeA
!define SHOW_CoreAgentAtRuntimeA



!include ../runtime_objects.plantuml

box "Legacy Domain Sandbox\nat Alice Device"
                participant "Legacy Domain\n Sandbox" as sandbox@LDSB
                participant "Legacy Domain\n Protostub" as protostub@LDSB
end box


box "Legacy Domain"
                 participant "Legacy Service\nGateway" as GW@LS1
		 participant "Back-End service" as BES@LS1
                 participant "Catalogue\nSupport Service" as Cat@LS1
end box

-> RunUA@A : loadStub( legacy-domain,\n legacyDomainConfig )

RunUA@A -> RunReg@A : discoverStub( legacy-domain )

alt Stub Not Available in Registry

RunUA@A <-- RunReg@A : returns null

== get protocol stub descriptor ==


	RunUA@A -> Cat@LS1 : get <legacy-domain>/.well-known/protostub/default/

		note over BUS@A
			as defined in the data model the
			Protocol Stub Descriptor is located
			 in a well known URI.
		end note

	RunUA@A <-- Cat@LS1 : returned protostub descriptor

	== get protocol stub source code ==

	RunUA@A -> BES@LS1 : get protocolStubSourceCode

	RunUA@A <-- BES@LS1 : return protostub.js

	== get protocol stub URL ==

	group Protocol Stub instance is registered
		RunUA@A -> RunReg@A : registerStub(legacy-domain)

		note right
			protostub can be generated locally
			by the Runtime Registry ensuring
			the address is unique in the Runtime namespace
			since it only has to be reached by Runtime components
		end note

		RunReg@A -> RunReg@A : generateStubURL(legacy-domain)

		opt Protocol Stub instance is registered in the remote Domain Registry
		...
		end

		RunReg@A -> BUS@A : addListener(\n registryListener,\n RuntimeProtoStubURL\status)

		RunUA@A <-- RunReg@A : return RuntimeProtoStubURL

		RunUA@A -> GW@LS1 : legacy-protocol-registration(e.g. REGISTER in SIP) 
		note right
			at this point it will be necessary to send
			a token within the request to login the ID
			of the Hyperty using the Interworking Protostub
			in the Legacy domain
		end note
                RunUA@A <-- GW@LS1 : legacy-protocol-registration-ack(e.g. 200OK to the REGISTER in SIP) 
	end

== Instantiate Sandbox with Protocol Stub ==

	create sandbox@LDSB 
	RunUA@A -> sandbox@LDSB: new( msgBus, capabilities )

	RunUA@A <-- sandbox@LDSB : return sandboxInstance

	RunUA@A -> RunReg@A : registerSandbox\n( sandboxInstance, domainURL )

	RunUA@A <-- RunReg@A : return RuntimeSandboxURL

	RunUA@A -> sandbox@LDSB : deployComponent( protostub.js, RuntimeProtoStubURL,configuration )



	create protostub@LDSB
	sandbox@LDSB -> protostub@LDSB : new

	RunUA@A <-- sandbox@LDSB : return componet is deployed
        protostub@LDSB -> GW@LS1 : legacy-protocol-registration(e.g. REGISTER in SIP)
                note right
                        at this point it will be necessary to send
                        a token within the request to login the ID
                        of the Hyperty using the Interworking Protostub
                        in the Legacy domain
                end note
        protostub@LDSB <-- GW@LS1 : legacy-protocol-registration-ack(e.g. 200OK to the REGISTER in SIP)


== configure core msg bus to route messages to new protocol stub ==


	BUS@A <- RunUA@A : addListener( sandboxInstance.postMessage, RuntimeProtoStubURL)

	 <- RunUA@A : successful

== Protocol Stub connects to domain ==

	group Protocol Stub connection to domain: see Domain Registration in the Identity Management diagrams

	...

	end group

	protostub@LDSB -> BUS@A : postMessage( \nprotostubStatusUpdate message )


	note left
		eg protostub is connected or disconnected from the domain
	end note

	BUS@A -> RunReg@A : onEvent( \nprotostubStatusUpdate message )

end

@enduml
