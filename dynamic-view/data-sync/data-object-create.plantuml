

@startuml "data-object-create.png"

autonumber

!define SHOW_RuntimeA

!define SHOW_CoreRuntimeA
!define SHOW_AllocateAtRuntimeA
!define SHOW_SMAtRuntimeA
!define SHOW_SP1SandboxAtRuntimeA
!define SHOW_Syncher1AtRuntimeA

!define SHOW_SP1

!define SHOW_Runtime1B

!define SHOW_CoreRuntime1B
!define SHOW_SP1SandboxAtRuntime1B
!define SHOW_ServiceProvider1HypertyAtRuntime1B

!include ../runtime_objects.plantuml

Sync1@A -> RunSM@A : Create MSG

RunSM@A <- RunSM@A : policyEngine.authorise()

group Allocate Data Object Address (see ..\basics\allocate-address.md)
  RunAllocate@A <- RunSM@A : allocate(\nscheme,\ndescriptor,\nowner )

  ...

  RunAllocate@A -> RunSM@A : return address
end


  group Setup Routing Path for the new Data Object
    RunSM@A -> SP1 : Subscribe Data Object URLs Message

    note right
      add listeners to <ObjectUrl>, <ObjectUrl>/subscription,
      and  <ObjectUrl>/children,
    end note

  RunSM@A <- SP1 : subscription Response Message
  end


Sync1@A <- RunSM@A : Create Response MSG

		note right
			Hyperty owner is informed
			 about new DataObject URL
		end note

RunSM@A -> RunSM@A : bus.addListener\n( SMListener, \n<ObjectURL>/subscription )

note right
	Reporter SM set its listener to receive Object subscription requests from Observers
end note

opt Synch Manager keeps the most updated version of the data object, which will be returned to new Observers

	RunSM@A -> RunSM@A : bus.addListener(\n<ObjectURL>/changes, \nSyncManagerListener )

end

opt Hyperty owner / reporter is updated when object observers are added or removed

	RunSM@A -> RunSM@A : bus.addListener(\n<ObjectURL>/observers, \nhypertyOwnerSandboxListener )

end


  group Register Data Object at Domain Registry

    RunSM@A <- RunSM@A : registry.registerDataObject(ObjectURL)

    RunSM@A -> RunSM@A : registry: bus.addListener(\n<ObjectURL>/status, \nRegistryListener )

    RunSM@A -> SP1 : Create Registration Data Object Message

    note right
      Data Object is registered in the Domain Registry
    end note

    RunSM@A <-- SP1 : Create Registration Response Message
  end

  ==  Hyperties are notified about new object creation ==

  RunSM@A -> SP1H@1B : Create Msg

  opt Invited Hyperties can send provisional responses eg to aknowledge the reception
  	...

    RunSM@A <- SP1H@1B : provisional Response Msg
    Sync1@A <- RunSM@A : provisional Response Msg

  end

  opt Invited Hyperties can send responses accepting or not to be observer
  	...

    RunSM@A <- SP1H@1B : final Response Msg
    Sync1@A <- RunSM@A : final Response Msg

  	...
  end


@enduml
