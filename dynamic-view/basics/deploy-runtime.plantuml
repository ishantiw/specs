@startuml "deploy-runtime.png"

autonumber

!define SHOW_RuntimeA

!define SHOW_AppAtRuntimeA

!define SHOW_CoreRuntimeA
!define SHOW_MsgBUSAtRuntimeA
!define SHOW_RegistryAtRuntimeA
!define SHOW_IdentitiesAtRuntimeA
!define SHOW_AuthAtRuntimeA
!define SHOW_CoreAgentAtRuntimeA
!define SHOW_CatalogueAtRuntimeA
!define SHOW_SMAtRuntimeA

!define SHOW_SP1SandboxAtRuntimeA
!define SHOW_Protostub1AtRuntimeA

!define SHOW_CoreRuntimeProvider

!include ../runtime_objects.plantuml

== Deploy Core Runtime ==


create RunUA@A
App@A -> RunUA@A : new

create RunCat@A
RunUA@A -> RunCat@A : new

RunUA@A -> RunCat@A : getRuntime(RuntimeCatalogueURL)

group option : if most updated version of Runtime source package is not stored locally

  RunCat@A -> CoreRunSP : get RuntimeCatalogueURL

  RunCat@A <-- CoreRunSP : return Runtime descriptor

end group

RunUA@A <-- RunCat@A : return Runtime

create RunReg@A
RunUA@A -> RunReg@A : new

create RunID@A
RunUA@A -> RunID@A : new

create RunAuth@A
RunUA@A -> RunAuth@A : new

create RunSM@A
RunUA@A -> RunSM@A : new

create BUS@A
RunUA@A -> BUS@A : new

RunUA@A -> RunReg@A : init( remoteRegistryURL )

RunReg@A -> RunReg@A : reuse cached\n RuntimeURL

RunUA@A -> RunSM@A : init( )

loop  Phase 2 New!! for each stored reporter subscription

  RunSM@A -> BUS@A : addListener\n( DataObjURL\changes, listener)

end

loop Phase 2 New!! for each stored observer subscription

  RunSM@A -> RunSM@A : addListener\n( DataObjURL\changes, observerListener)

end

group option : Phase 2 New!! if runtime is P2P enabled

  group : P2P Handler Stub is loaded (see protostub-load.md)
  end group

RunUA@A -> BUS@A : postMsg( subscribe P2PHandlerStubURL request message)

  note right
    the message delivery path has to be set in the Message Node
  end note

  BUS@A -> Proto1@A : send subscribe \nP2PHandlerStubURL \nrequest message


  group : it performs the Service Provider 1 domain protostub load, see protostub-load.md)

    create Proto1@A
    RunUA@A -> Proto1@A : new
    ...

  end group

  CoreRunSP <- Proto1@A : send subscribe \nP2PHandlerStubURL \nrequest message

  CoreRunSP <-- Proto1@A : subscribe \nP2PHandlerStubURL\n response message

  BUS@A <-- Proto1@A : subscribe \nP2PHandlerStubURL\n response message

  RunUA@A <- BUS@A : ontMsg( subscribe \nP2PHandlerStubURL \nresponse message)

end group



@enduml
